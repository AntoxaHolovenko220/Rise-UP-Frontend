import { useAuthStore } from '@/store/authStore'
import axios from 'axios'
import { toast } from 'react-toastify'
import axiosInstance from './axiosInstance'

const LOGIN_URL = 'https://auth-api.robota.ua/Login'
const RESUME_FILE_URL = 'https://employer-api.robota.ua/resume/file'

// üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
export const getAuthToken = async (): Promise<string | null> => {
	try {
		const { rabotaEmail, rabotaPassword } = useAuthStore.getState()

		if (!rabotaEmail || !rabotaPassword) {
			console.error('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –∏–∑ Store')
			return null
		}

		const response = await axios.post<string>(
			LOGIN_URL,
			{ username: rabotaEmail, password: rabotaPassword },
			{
				headers: {
					'Content-Type': 'application/json',
					Accept: 'application/json',
				},
			}
		)

		if (response.status !== 200) {
			throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –°—Ç–∞—Ç—É—Å: ${response.status}`)
		}

		const token = response.data.trim()
		console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:', token)
		return token
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
		return null
	}
}

// üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
export const fetchCandidatesData = async (candidateUrl: string) => {
	try {
		const token = await getAuthToken()
		if (!token) throw new Error('‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω.')

		// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
		const match = candidateUrl.match(/\/candidates\/(\d+)/)
		if (!match) {
			alert('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!')
			return null
		}
		const candidateId = match[1]

		console.log(`üîπ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å ID: ${candidateId}`)

		const response = await axios.get(
			`https://employer-api.robota.ua/resume/${candidateId}`,
			{
				headers: {
					Authorization: `Bearer ${token}`,
					Accept: 'application/json',
				},
			}
		)

		if (response.status !== 200) {
			throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö! –°—Ç–∞—Ç—É—Å: ${response.status}`)
		}

		console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', response.data)

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
		const educationArray =
			response.data.educations?.map(
				(ed: any) =>
					`${ed.name}${ed.speciality ? `, ${ed.speciality}` : ''}, ${
						ed.yearOfGraduation
					}`
			) || []

		const experiencesArray =
			response.data.experiences?.map(
				(exp: any) => `${exp.position} –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ${exp.company}`
			) || []

		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
		let phoneNumber = ''
		const contact = response.data.contacts?.find(
			(contact: any) =>
				contact.typeId === 'Phone' || contact.typeId === 'SocialNetwork'
		)

		if (contact) {
			if (contact.typeId === 'Phone') {
				phoneNumber = contact.description
			} else if (contact.typeId === 'SocialNetwork') {
				if (contact.subTypeId === 'telegram') {
					phoneNumber = contact.description.replace('https://t.me/', '')
				} else if (contact.subTypeId === 'viber') {
					phoneNumber = contact.description.replace('viber://chat?number=', '')
				}
			}
		}

		// –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ CRM
		const payload = {
			firstname: response.data.name,
			surname: response.data.fatherName,
			lastname: response.data.surname,
			email: response.data.email,
			phone: phoneNumber,
			profession: response.data.speciality,
			education: educationArray,
			experience: experiencesArray,
			resumeId: response.data.resumeId,
			notebookId: response.data.notebookId,
			img: `https://cv-photos-original.robota.ua/cdn-cgi/image/w=300/${response.data.photo}`,
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CRM
		await axiosInstance.post('/leads/create', payload, {
			headers: { 'Content-Type': 'multipart/form-data' },
		})

		toast.success('–ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
		return response.data
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error)
		return null
	}
}

// üîπ –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ
export const fetchResumeFile = async (
	cvId: string,
	notebookId: string
): Promise<void> => {
	try {
		const token = await getAuthToken()
		if (!token) throw new Error('‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω.')

		console.log(
			`üîπ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –¥–ª—è CvId: ${cvId}, NotebookId: ${notebookId}`
		)

		const response = await axios.get(RESUME_FILE_URL, {
			headers: {
				Authorization: `Bearer ${token}`,
				Accept: '*/*',
			},
			params: { CvId: cvId, notebookId: notebookId },
			responseType: 'blob',
		})

		if (response.status !== 200) {
			throw new Error(
				`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ! –°—Ç–∞—Ç—É—Å: ${response.status}`
			)
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
		const contentType = response.headers['content-type']
		let fileExtension = '.bin'

		if (contentType.includes('pdf')) fileExtension = '.pdf'
		else if (contentType.includes('rtf')) fileExtension = '.rtf'
		else if (contentType.includes('msword')) fileExtension = '.doc'
		else if (contentType.includes('officedocument.wordprocessingml.document'))
			fileExtension = '.docx'
		else if (contentType.includes('plain')) fileExtension = '.txt'

		// –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
		const url = window.URL.createObjectURL(
			new Blob([response.data], { type: contentType })
		)
		const link = document.createElement('a')
		link.href = url
		link.setAttribute('download', `resume_${cvId}${fileExtension}`)
		document.body.appendChild(link)
		link.click()
		document.body.removeChild(link)

		console.log(
			`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${fileExtension.toUpperCase()}!`
		)
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ:', error)
	}
}
